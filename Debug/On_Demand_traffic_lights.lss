
On_Demand_traffic_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c70  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000ce4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144b  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  000022fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9c  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000624  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a3  00000000  00000000  000042a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 97 01 	call	0x32e	; 0x32e <main>
  74:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
// Select mode
uint8_t RUNNING_MODE =NormalMode; 
App_init(){
	
	// Cars led
	LED_init(0,PORT_A);
  7c:	61 e4       	ldi	r22, 0x41	; 65
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 25 01 	call	0x24a	; 0x24a <LED_init>
	LED_init(1,PORT_A);
  84:	61 e4       	ldi	r22, 0x41	; 65
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 25 01 	call	0x24a	; 0x24a <LED_init>
	LED_init(2,PORT_A);
  8c:	61 e4       	ldi	r22, 0x41	; 65
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 25 01 	call	0x24a	; 0x24a <LED_init>
	
	// Pedestrian led
	LED_init(0,PORT_B);
  94:	62 e4       	ldi	r22, 0x42	; 66
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 25 01 	call	0x24a	; 0x24a <LED_init>
	LED_init(1,PORT_B);
  9c:	62 e4       	ldi	r22, 0x42	; 66
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 25 01 	call	0x24a	; 0x24a <LED_init>
	LED_init(2,PORT_B);
  a4:	62 e4       	ldi	r22, 0x42	; 66
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 25 01 	call	0x24a	; 0x24a <LED_init>
	
	// initializing External Interrupt pin to be input
	Button_init(2,PORT_D);
  ac:	64 e4       	ldi	r22, 0x44	; 68
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 21 01 	call	0x242	; 0x242 <Button_init>
	
	// initialize Timer in normal mode
	TimerNormal_init();
  b4:	0e 94 c1 03 	call	0x782	; 0x782 <TimerNormal_init>
	
	// enable interrupts
	INT0_init(FALLING_EDGE);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 9c 03 	call	0x738	; 0x738 <INT0_init>
  be:	08 95       	ret

000000c0 <App_Start>:
	
	
}

App_Start(){
	LED_on(0,PORT_B); // turn pedestrian red led on
  c0:	62 e4       	ldi	r22, 0x42	; 66
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
	while(1){
		switch (RUNNING_MODE)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	88 23       	and	r24, r24
  ce:	21 f0       	breq	.+8      	; 0xd8 <App_Start+0x18>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	09 f4       	brne	.+2      	; 0xd6 <App_Start+0x16>
  d4:	45 c0       	rjmp	.+138    	; 0x160 <App_Start+0xa0>
  d6:	f8 cf       	rjmp	.-16     	; 0xc8 <App_Start+0x8>
		{
		case NormalMode:
			if (Cars.Next_State == RED )  // check if the next light is red
  d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Cars+0x1>
  dc:	81 11       	cpse	r24, r1
  de:	14 c0       	rjmp	.+40     	; 0x108 <App_Start+0x48>
			{
				Cars.LED_State=RED; // stating the the current light is red
  e0:	e1 e6       	ldi	r30, 0x61	; 97
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	10 82       	st	Z, r1
				Cars.Next_State=YELLOW; // informing that the next led is yellow
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	81 83       	std	Z+1, r24	; 0x01
				LED_on(0,PORT_A); // turn red light on and wait for 5 second then turn it off 
  ea:	61 e4       	ldi	r22, 0x41	; 65
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
				Timer_delay(5);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	90 e4       	ldi	r25, 0x40	; 64
  fa:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
				LED_off(0,PORT_A);
  fe:	61 e4       	ldi	r22, 0x41	; 65
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
				
				break;
 106:	e0 cf       	rjmp	.-64     	; 0xc8 <App_Start+0x8>
			}
			else if (Cars.Next_State == YELLOW ) // check if the next light is yellow
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	a1 f4       	brne	.+40     	; 0x134 <App_Start+0x74>
			{
				if (Cars.LED_State == RED)    // check if the last light is red
 10c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Cars>
 110:	81 11       	cpse	r24, r1
 112:	04 c0       	rjmp	.+8      	; 0x11c <App_Start+0x5c>
				{
					Cars.Next_State = GREEN;       // informing that the next led is green
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Cars+0x1>
 11a:	04 c0       	rjmp	.+8      	; 0x124 <App_Start+0x64>
				}
				else if (Cars.LED_State == GREEN)     // check if the last light is green
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	11 f4       	brne	.+4      	; 0x124 <App_Start+0x64>
				{
					Cars.Next_State = RED;     // informing that the next led is red
 120:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Cars+0x1>
				}
				Cars.LED_State = YELLOW;     // blink yellow light on and off for 5 second 
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Cars>
				LED_blink(1,PORT_A,5);
 12a:	45 e0       	ldi	r20, 0x05	; 5
 12c:	61 e4       	ldi	r22, 0x41	; 65
 12e:	0e 94 31 01 	call	0x262	; 0x262 <LED_blink>
				break;
 132:	ca cf       	rjmp	.-108    	; 0xc8 <App_Start+0x8>
			}
			else if (Cars.Next_State=GREEN)
 134:	c1 e6       	ldi	r28, 0x61	; 97
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	12 e0       	ldi	r17, 0x02	; 2
 13a:	19 83       	std	Y+1, r17	; 0x01
			{
			   // the next light is green
				LED_on(2,PORT_A);   // turn green light on and wait for 5 second then turn it off 
 13c:	61 e4       	ldi	r22, 0x41	; 65
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
				Timer_delay(5);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 ea       	ldi	r24, 0xA0	; 160
 14a:	90 e4       	ldi	r25, 0x40	; 64
 14c:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
				LED_off(2,PORT_A);
 150:	61 e4       	ldi	r22, 0x41	; 65
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
				Cars.LED_State=GREEN;    // stating the the current light is green
 158:	18 83       	st	Y, r17
				Cars.Next_State=YELLOW;   // informing that the next led is yellow
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	89 83       	std	Y+1, r24	; 0x01
				break;
 15e:	b4 cf       	rjmp	.-152    	; 0xc8 <App_Start+0x8>
			}
				
			
		
		case PedestrianMode:
				if (Cars.LED_State == RED)
 160:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Cars>
 164:	81 11       	cpse	r24, r1
 166:	12 c0       	rjmp	.+36     	; 0x18c <App_Start+0xcc>
				{
					LED_off(0,PORT_B); // pedestrian red off 
 168:	62 e4       	ldi	r22, 0x42	; 66
 16a:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
					LED_on(0,PORT_A);  // cars red on
 16e:	61 e4       	ldi	r22, 0x41	; 65
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
					LED_on(2,PORT_B);  // pedestrian green on
 176:	62 e4       	ldi	r22, 0x42	; 66
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
					Timer_delay(5);    // wait for 5 second 
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	80 ea       	ldi	r24, 0xA0	; 160
 184:	90 e4       	ldi	r25, 0x40	; 64
 186:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
 18a:	20 c0       	rjmp	.+64     	; 0x1cc <App_Start+0x10c>
				}
				else if (Cars.LED_State == YELLOW || Cars.LED_State == GREEN)
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	e8 f4       	brcc	.+58     	; 0x1cc <App_Start+0x10c>
				{
					LED_on(0,PORT_B); // pedestrian red on
 192:	62 e4       	ldi	r22, 0x42	; 66
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
					LED_blink_2leds(1,PORT_A,1,PORT_B,5);
 19a:	05 e0       	ldi	r16, 0x05	; 5
 19c:	22 e4       	ldi	r18, 0x42	; 66
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	61 e4       	ldi	r22, 0x41	; 65
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_blink_2leds>
					LED_off(0,PORT_B); // pedestrian red off
 1a8:	62 e4       	ldi	r22, 0x42	; 66
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
					LED_on(0,PORT_A);  // cars red is on
 1b0:	61 e4       	ldi	r22, 0x41	; 65
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
					LED_on(2,PORT_B);  // pedestrian green on 
 1b8:	62 e4       	ldi	r22, 0x42	; 66
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
					Timer_delay(5);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 ea       	ldi	r24, 0xA0	; 160
 1c6:	90 e4       	ldi	r25, 0x40	; 64
 1c8:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
					
				}
				LED_off(0,PORT_A);  // cars red off
 1cc:	61 e4       	ldi	r22, 0x41	; 65
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
				LED_off(2,PORT_B);  // pedestrian green off
 1d4:	62 e4       	ldi	r22, 0x42	; 66
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
				LED_blink_2leds(1,PORT_A,1,PORT_B,5); // blink both yellow lights on and off
 1dc:	05 e0       	ldi	r16, 0x05	; 5
 1de:	22 e4       	ldi	r18, 0x42	; 66
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	61 e4       	ldi	r22, 0x41	; 65
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED_blink_2leds>
				LED_on(2,PORT_A);   //cars green on
 1ea:	61 e4       	ldi	r22, 0x41	; 65
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
				LED_on(0,PORT_B);	// pedestrian red on 
 1f2:	62 e4       	ldi	r22, 0x42	; 66
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 29 01 	call	0x252	; 0x252 <LED_on>
				Timer_delay(5);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 ea       	ldi	r24, 0xA0	; 160
 200:	90 e4       	ldi	r25, 0x40	; 64
 202:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
				LED_off(2,PORT_A);
 206:	61 e4       	ldi	r22, 0x41	; 65
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_off>
				Cars.LED_State=GREEN;
 20e:	e1 e6       	ldi	r30, 0x61	; 97
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
				Cars.Next_State=YELLOW;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	81 83       	std	Z+1, r24	; 0x01
				RUNNING_MODE= NormalMode;
 21a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				Enable_Global_Interrupt();
 21e:	78 94       	sei
				break;		
 220:	53 cf       	rjmp	.-346    	; 0xc8 <App_Start+0x8>

00000222 <__vector_1>:
		}
	}
}

ISR(EXT_INT0)
{
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
	
	RUNNING_MODE= PedestrianMode;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Disable_Global_Interrupt();
 234:	f8 94       	cli
	
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <Button_init>:

#include "BUTTON.h"

// this function is going to initialize the pins to be used with buttons
void Button_init(uint8_t ButtonPin_Number, uint8_t ButtonPort_Number){
	DIO_init(ButtonPin_Number, ButtonPort_Number, IN);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	0e 94 9c 01 	call	0x338	; 0x338 <DIO_init>
 248:	08 95       	ret

0000024a <LED_init>:
}
void LED_off(uint8_t LedPin_Number, uint8_t LedPort_Number){
	DIO_write(LedPin_Number,LedPort_Number,LOW);
}
void LED_toggle(uint8_t LedPin_Number, uint8_t LedPort_Number){
	DIO_toggle(LedPin_Number,LedPort_Number);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	0e 94 9c 01 	call	0x338	; 0x338 <DIO_init>
 250:	08 95       	ret

00000252 <LED_on>:
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
 258:	08 95       	ret

0000025a <LED_off>:
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
 260:	08 95       	ret

00000262 <LED_blink>:
}
void LED_blink(uint8_t LedPin_Number, uint8_t LedPort_Number,uint8_t delay){
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	08 2f       	mov	r16, r24
 26e:	16 2f       	mov	r17, r22
 270:	f4 2e       	mov	r15, r20
	int i;
	for (i=0; i<delay;i++)
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	d0 e0       	ldi	r29, 0x00	; 0
 276:	16 c0       	rjmp	.+44     	; 0x2a4 <LED_blink+0x42>
	{
		DIO_write(LedPin_Number,LedPort_Number,HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	61 2f       	mov	r22, r17
 27c:	80 2f       	mov	r24, r16
 27e:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
		Timer_delay(0.5);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	9f e3       	ldi	r25, 0x3F	; 63
 28a:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
		DIO_toggle(LedPin_Number,LedPort_Number);
 28e:	61 2f       	mov	r22, r17
 290:	80 2f       	mov	r24, r16
 292:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_toggle>
		Timer_delay(0.5);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	9f e3       	ldi	r25, 0x3F	; 63
 29e:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
void LED_toggle(uint8_t LedPin_Number, uint8_t LedPort_Number){
	DIO_toggle(LedPin_Number,LedPort_Number);
}
void LED_blink(uint8_t LedPin_Number, uint8_t LedPort_Number,uint8_t delay){
	int i;
	for (i=0; i<delay;i++)
 2a2:	21 96       	adiw	r28, 0x01	; 1
 2a4:	8f 2d       	mov	r24, r15
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	c8 17       	cp	r28, r24
 2aa:	d9 07       	cpc	r29, r25
 2ac:	2c f3       	brlt	.-54     	; 0x278 <LED_blink+0x16>
		Timer_delay(0.5);
		DIO_toggle(LedPin_Number,LedPort_Number);
		Timer_delay(0.5);
	}
	
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	08 95       	ret

000002ba <LED_blink_2leds>:
void LED_blink_2leds(uint8_t LedPin_Number1, uint8_t LedPort_Number1,uint8_t LedPin_Number2, uint8_t LedPort_Number2,uint8_t delay){
 2ba:	df 92       	push	r13
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	d8 2e       	mov	r13, r24
 2ca:	e6 2e       	mov	r14, r22
 2cc:	f4 2e       	mov	r15, r20
 2ce:	12 2f       	mov	r17, r18
	int i;
	for (i=0; i<delay;i++)
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	1f c0       	rjmp	.+62     	; 0x314 <LED_blink_2leds+0x5a>
	{
		DIO_write(LedPin_Number1,LedPort_Number1,HIGH);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	6e 2d       	mov	r22, r14
 2da:	8d 2d       	mov	r24, r13
 2dc:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
		DIO_write(LedPin_Number2,LedPort_Number2,HIGH);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	61 2f       	mov	r22, r17
 2e4:	8f 2d       	mov	r24, r15
 2e6:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
		Timer_delay(0.5);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	9f e3       	ldi	r25, 0x3F	; 63
 2f2:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
		DIO_toggle(LedPin_Number1,LedPort_Number1);
 2f6:	6e 2d       	mov	r22, r14
 2f8:	8d 2d       	mov	r24, r13
 2fa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_toggle>
		DIO_toggle(LedPin_Number2,LedPort_Number2);
 2fe:	61 2f       	mov	r22, r17
 300:	8f 2d       	mov	r24, r15
 302:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <DIO_toggle>
		Timer_delay(0.5);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	9f e3       	ldi	r25, 0x3F	; 63
 30e:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_delay>
	}
	
}
void LED_blink_2leds(uint8_t LedPin_Number1, uint8_t LedPort_Number1,uint8_t LedPin_Number2, uint8_t LedPort_Number2,uint8_t delay){
	int i;
	for (i=0; i<delay;i++)
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	80 2f       	mov	r24, r16
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	c8 17       	cp	r28, r24
 31a:	d9 07       	cpc	r29, r25
 31c:	e4 f2       	brlt	.-72     	; 0x2d6 <LED_blink_2leds+0x1c>
		DIO_toggle(LedPin_Number1,LedPort_Number1);
		DIO_toggle(LedPin_Number2,LedPort_Number2);
		Timer_delay(0.5);
	}
	
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	08 95       	ret

0000032e <main>:



int main(void)
{
	App_init();
 32e:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	
    while (1) 
    {
		App_Start();
 332:	0e 94 60 00 	call	0xc0	; 0xc0 <App_Start>
 336:	fd cf       	rjmp	.-6      	; 0x332 <main+0x4>

00000338 <DIO_init>:
		else {
			return DIO_cant_read;
			}
		break;
	}
}
 338:	62 34       	cpi	r22, 0x42	; 66
 33a:	69 f1       	breq	.+90     	; 0x396 <DIO_init+0x5e>
 33c:	18 f4       	brcc	.+6      	; 0x344 <DIO_init+0xc>
 33e:	61 34       	cpi	r22, 0x41	; 65
 340:	41 f0       	breq	.+16     	; 0x352 <DIO_init+0x1a>
 342:	8d c0       	rjmp	.+282    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 344:	63 34       	cpi	r22, 0x43	; 67
 346:	09 f4       	brne	.+2      	; 0x34a <DIO_init+0x12>
 348:	48 c0       	rjmp	.+144    	; 0x3da <DIO_init+0xa2>
 34a:	64 34       	cpi	r22, 0x44	; 68
 34c:	09 f4       	brne	.+2      	; 0x350 <DIO_init+0x18>
 34e:	66 c0       	rjmp	.+204    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 350:	86 c0       	rjmp	.+268    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 352:	41 11       	cpse	r20, r1
 354:	0f c0       	rjmp	.+30     	; 0x374 <DIO_init+0x3c>
 356:	4a b3       	in	r20, 0x1a	; 26
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_init+0x2c>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_init+0x28>
 368:	cb 01       	movw	r24, r22
 36a:	80 95       	com	r24
 36c:	84 23       	and	r24, r20
 36e:	8a bb       	out	0x1a, r24	; 26
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
 374:	41 30       	cpi	r20, 0x01	; 1
 376:	09 f0       	breq	.+2      	; 0x37a <DIO_init+0x42>
 378:	73 c0       	rjmp	.+230    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 37a:	4a b3       	in	r20, 0x1a	; 26
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_init+0x50>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_init+0x4c>
 38c:	cb 01       	movw	r24, r22
 38e:	84 2b       	or	r24, r20
 390:	8a bb       	out	0x1a, r24	; 26
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	08 95       	ret
 396:	41 11       	cpse	r20, r1
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <DIO_init+0x80>
 39a:	47 b3       	in	r20, 0x17	; 23
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_init+0x70>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_init+0x6c>
 3ac:	cb 01       	movw	r24, r22
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	87 bb       	out	0x17, r24	; 23
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_init+0x86>
 3bc:	53 c0       	rjmp	.+166    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 3be:	47 b3       	in	r20, 0x17	; 23
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_init+0x94>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_init+0x90>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	87 bb       	out	0x17, r24	; 23
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
 3da:	41 11       	cpse	r20, r1
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <DIO_init+0xc4>
 3de:	44 b3       	in	r20, 0x14	; 20
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_init+0xb4>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_init+0xb0>
 3f0:	cb 01       	movw	r24, r22
 3f2:	80 95       	com	r24
 3f4:	84 23       	and	r24, r20
 3f6:	84 bb       	out	0x14, r24	; 20
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
 3fc:	41 30       	cpi	r20, 0x01	; 1
 3fe:	a1 f5       	brne	.+104    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 400:	44 b3       	in	r20, 0x14	; 20
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	84 2b       	or	r24, r20
 416:	84 bb       	out	0x14, r24	; 20
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
 41c:	41 11       	cpse	r20, r1
 41e:	0f c0       	rjmp	.+30     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 420:	41 b3       	in	r20, 0x11	; 17
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	8a 95       	dec	r24
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	80 95       	com	r24
 436:	84 23       	and	r24, r20
 438:	81 bb       	out	0x11, r24	; 17
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
 43e:	41 30       	cpi	r20, 0x01	; 1
 440:	a9 f4       	brne	.+42     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 442:	41 b3       	in	r20, 0x11	; 17
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	b9 01       	movw	r22, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	8a 95       	dec	r24
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	cb 01       	movw	r24, r22
 456:	84 2b       	or	r24, r20
 458:	81 bb       	out	0x11, r24	; 17
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret
 45e:	08 95       	ret
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	08 95       	ret
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	08 95       	ret
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	08 95       	ret
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	08 95       	ret

00000470 <DIO_write>:
 470:	62 34       	cpi	r22, 0x42	; 66
 472:	69 f1       	breq	.+90     	; 0x4ce <DIO_write+0x5e>
 474:	18 f4       	brcc	.+6      	; 0x47c <DIO_write+0xc>
 476:	61 34       	cpi	r22, 0x41	; 65
 478:	41 f0       	breq	.+16     	; 0x48a <DIO_write+0x1a>
 47a:	8d c0       	rjmp	.+282    	; 0x596 <DIO_write+0x126>
 47c:	63 34       	cpi	r22, 0x43	; 67
 47e:	09 f4       	brne	.+2      	; 0x482 <DIO_write+0x12>
 480:	48 c0       	rjmp	.+144    	; 0x512 <DIO_write+0xa2>
 482:	64 34       	cpi	r22, 0x44	; 68
 484:	09 f4       	brne	.+2      	; 0x488 <DIO_write+0x18>
 486:	66 c0       	rjmp	.+204    	; 0x554 <DIO_write+0xe4>
 488:	86 c0       	rjmp	.+268    	; 0x596 <DIO_write+0x126>
 48a:	41 11       	cpse	r20, r1
 48c:	0f c0       	rjmp	.+30     	; 0x4ac <DIO_write+0x3c>
 48e:	4b b3       	in	r20, 0x1b	; 27
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	b9 01       	movw	r22, r18
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_write+0x2c>
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	8a 95       	dec	r24
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_write+0x28>
 4a0:	cb 01       	movw	r24, r22
 4a2:	80 95       	com	r24
 4a4:	84 23       	and	r24, r20
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	08 95       	ret
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <DIO_write+0x42>
 4b0:	73 c0       	rjmp	.+230    	; 0x598 <DIO_write+0x128>
 4b2:	4b b3       	in	r20, 0x1b	; 27
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	b9 01       	movw	r22, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_write+0x50>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	8a 95       	dec	r24
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_write+0x4c>
 4c4:	cb 01       	movw	r24, r22
 4c6:	84 2b       	or	r24, r20
 4c8:	8b bb       	out	0x1b, r24	; 27
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	08 95       	ret
 4ce:	41 11       	cpse	r20, r1
 4d0:	0f c0       	rjmp	.+30     	; 0x4f0 <DIO_write+0x80>
 4d2:	48 b3       	in	r20, 0x18	; 24
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_write+0x70>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	8a 95       	dec	r24
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_write+0x6c>
 4e4:	cb 01       	movw	r24, r22
 4e6:	80 95       	com	r24
 4e8:	84 23       	and	r24, r20
 4ea:	88 bb       	out	0x18, r24	; 24
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
 4f0:	41 30       	cpi	r20, 0x01	; 1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <DIO_write+0x86>
 4f4:	53 c0       	rjmp	.+166    	; 0x59c <DIO_write+0x12c>
 4f6:	48 b3       	in	r20, 0x18	; 24
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0x94>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x90>
 508:	cb 01       	movw	r24, r22
 50a:	84 2b       	or	r24, r20
 50c:	88 bb       	out	0x18, r24	; 24
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
 512:	41 11       	cpse	r20, r1
 514:	0f c0       	rjmp	.+30     	; 0x534 <DIO_write+0xc4>
 516:	45 b3       	in	r20, 0x15	; 21
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_write+0xb4>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_write+0xb0>
 528:	cb 01       	movw	r24, r22
 52a:	80 95       	com	r24
 52c:	84 23       	and	r24, r20
 52e:	85 bb       	out	0x15, r24	; 21
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret
 534:	41 30       	cpi	r20, 0x01	; 1
 536:	a1 f5       	brne	.+104    	; 0x5a0 <DIO_write+0x130>
 538:	45 b3       	in	r20, 0x15	; 21
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_write+0xd6>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_write+0xd2>
 54a:	cb 01       	movw	r24, r22
 54c:	84 2b       	or	r24, r20
 54e:	85 bb       	out	0x15, r24	; 21
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret
 554:	41 11       	cpse	r20, r1
 556:	0f c0       	rjmp	.+30     	; 0x576 <DIO_write+0x106>
 558:	42 b3       	in	r20, 0x12	; 18
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_write+0xf6>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_write+0xf2>
 56a:	cb 01       	movw	r24, r22
 56c:	80 95       	com	r24
 56e:	84 23       	and	r24, r20
 570:	82 bb       	out	0x12, r24	; 18
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	08 95       	ret
 576:	41 30       	cpi	r20, 0x01	; 1
 578:	a9 f4       	brne	.+42     	; 0x5a4 <DIO_write+0x134>
 57a:	42 b3       	in	r20, 0x12	; 18
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_write+0x118>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	8a 95       	dec	r24
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_write+0x114>
 58c:	cb 01       	movw	r24, r22
 58e:	84 2b       	or	r24, r20
 590:	82 bb       	out	0x12, r24	; 18
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret
 596:	08 95       	ret
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	08 95       	ret
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	08 95       	ret
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	08 95       	ret
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	08 95       	ret

000005a8 <DIO_toggle>:

// this function is going to toggle the pins
DIO_status DIO_toggle(uint8_t pin_number,uint8_t Port_number){
	switch (Port_number)
 5a8:	62 34       	cpi	r22, 0x42	; 66
 5aa:	c1 f1       	breq	.+112    	; 0x61c <DIO_toggle+0x74>
 5ac:	18 f4       	brcc	.+6      	; 0x5b4 <DIO_toggle+0xc>
 5ae:	61 34       	cpi	r22, 0x41	; 65
 5b0:	41 f0       	breq	.+16     	; 0x5c2 <DIO_toggle+0x1a>
 5b2:	b9 c0       	rjmp	.+370    	; 0x726 <DIO_toggle+0x17e>
 5b4:	63 34       	cpi	r22, 0x43	; 67
 5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_toggle+0x12>
 5b8:	5e c0       	rjmp	.+188    	; 0x676 <DIO_toggle+0xce>
 5ba:	64 34       	cpi	r22, 0x44	; 68
 5bc:	09 f4       	brne	.+2      	; 0x5c0 <DIO_toggle+0x18>
 5be:	87 c0       	rjmp	.+270    	; 0x6ce <DIO_toggle+0x126>
 5c0:	b2 c0       	rjmp	.+356    	; 0x726 <DIO_toggle+0x17e>
	{
		case PORT_A:
		if(((PINA&(1<<pin_number))>>pin_number) == LOW){ // check if the pin state is LOW OR HIGH
 5c2:	29 b3       	in	r18, 0x19	; 25
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	08 2e       	mov	r0, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_toggle+0x28>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	0a 94       	dec	r0
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_toggle+0x24>
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	24 23       	and	r18, r20
 5d8:	35 23       	and	r19, r21
 5da:	08 2e       	mov	r0, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_toggle+0x3a>
 5de:	35 95       	asr	r19
 5e0:	27 95       	ror	r18
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_toggle+0x36>
 5e6:	23 2b       	or	r18, r19
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <DIO_toggle+0x4c>
			PORTA |= (1<<pin_number);  // Set the pin State to be HIGH
 5ea:	8b b3       	in	r24, 0x1b	; 27
 5ec:	48 2b       	or	r20, r24
 5ee:	4b bb       	out	0x1b, r20	; 27
			return DIO_OK;
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	08 95       	ret
		}
		else if (((PINA&(1<<pin_number))>>pin_number) == HIGH){
 5f4:	29 b3       	in	r18, 0x19	; 25
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	24 23       	and	r18, r20
 5fa:	35 23       	and	r19, r21
 5fc:	b9 01       	movw	r22, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_toggle+0x5c>
 600:	75 95       	asr	r23
 602:	67 95       	ror	r22
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_toggle+0x58>
 608:	61 30       	cpi	r22, 0x01	; 1
 60a:	71 05       	cpc	r23, r1
 60c:	09 f0       	breq	.+2      	; 0x610 <DIO_toggle+0x68>
 60e:	8c c0       	rjmp	.+280    	; 0x728 <DIO_toggle+0x180>
			PORTA &= ~(1<<pin_number); // Set the pin State to be LOW
 610:	8b b3       	in	r24, 0x1b	; 27
 612:	40 95       	com	r20
 614:	48 23       	and	r20, r24
 616:	4b bb       	out	0x1b, r20	; 27
			return DIO_OK;
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	08 95       	ret
			return DIO_cant_toggle;
		}
		break;
		
		case PORT_B:
		if(((PINB&(1<<pin_number))>>pin_number) == LOW){ // check if the pin state is LOW OR HIGH
 61c:	26 b3       	in	r18, 0x16	; 22
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	08 2e       	mov	r0, r24
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_toggle+0x82>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_toggle+0x7e>
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	24 23       	and	r18, r20
 632:	35 23       	and	r19, r21
 634:	08 2e       	mov	r0, r24
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_toggle+0x94>
 638:	35 95       	asr	r19
 63a:	27 95       	ror	r18
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_toggle+0x90>
 640:	23 2b       	or	r18, r19
 642:	29 f4       	brne	.+10     	; 0x64e <DIO_toggle+0xa6>
			PORTB |= (1<<pin_number);  // Set the pin State to be HIGH
 644:	88 b3       	in	r24, 0x18	; 24
 646:	48 2b       	or	r20, r24
 648:	48 bb       	out	0x18, r20	; 24
			return DIO_OK;
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
		}
		else if (((PINB&(1<<pin_number))>>pin_number) == HIGH){
 64e:	26 b3       	in	r18, 0x16	; 22
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	24 23       	and	r18, r20
 654:	35 23       	and	r19, r21
 656:	b9 01       	movw	r22, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_toggle+0xb6>
 65a:	75 95       	asr	r23
 65c:	67 95       	ror	r22
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_toggle+0xb2>
 662:	61 30       	cpi	r22, 0x01	; 1
 664:	71 05       	cpc	r23, r1
 666:	09 f0       	breq	.+2      	; 0x66a <DIO_toggle+0xc2>
 668:	61 c0       	rjmp	.+194    	; 0x72c <DIO_toggle+0x184>
			PORTB &= ~(1<<pin_number); // Set the pin State to be LOW
 66a:	88 b3       	in	r24, 0x18	; 24
 66c:	40 95       	com	r20
 66e:	48 23       	and	r20, r24
 670:	48 bb       	out	0x18, r20	; 24
			return DIO_OK;		
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret
			return DIO_cant_toggle;
		}
		break;
		
		case PORT_C:
		if(((PINC&(1<<pin_number))>>pin_number) == LOW){ // check if the pin state is LOW OR HIGH
 676:	23 b3       	in	r18, 0x13	; 19
 678:	41 e0       	ldi	r20, 0x01	; 1
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	08 2e       	mov	r0, r24
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_toggle+0xdc>
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_toggle+0xd8>
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	24 23       	and	r18, r20
 68c:	35 23       	and	r19, r21
 68e:	08 2e       	mov	r0, r24
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_toggle+0xee>
 692:	35 95       	asr	r19
 694:	27 95       	ror	r18
 696:	0a 94       	dec	r0
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_toggle+0xea>
 69a:	23 2b       	or	r18, r19
 69c:	29 f4       	brne	.+10     	; 0x6a8 <DIO_toggle+0x100>
			PORTC |= (1<<pin_number);  // Set the pin State to be HIGH
 69e:	85 b3       	in	r24, 0x15	; 21
 6a0:	48 2b       	or	r20, r24
 6a2:	45 bb       	out	0x15, r20	; 21
			return DIO_OK;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
		}
		else if (((PINC&(1<<pin_number))>>pin_number) == HIGH){
 6a8:	23 b3       	in	r18, 0x13	; 19
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	24 23       	and	r18, r20
 6ae:	35 23       	and	r19, r21
 6b0:	b9 01       	movw	r22, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_toggle+0x110>
 6b4:	75 95       	asr	r23
 6b6:	67 95       	ror	r22
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_toggle+0x10c>
 6bc:	61 30       	cpi	r22, 0x01	; 1
 6be:	71 05       	cpc	r23, r1
 6c0:	b9 f5       	brne	.+110    	; 0x730 <DIO_toggle+0x188>
			PORTC &= ~(1<<pin_number); // Set the pin State to be LOW
 6c2:	85 b3       	in	r24, 0x15	; 21
 6c4:	40 95       	com	r20
 6c6:	48 23       	and	r20, r24
 6c8:	45 bb       	out	0x15, r20	; 21
			return DIO_OK;
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	08 95       	ret
			return DIO_cant_toggle;
		}
		break;
		
		case PORT_D:
		if(((PIND&(1<<pin_number))>>pin_number) == LOW){ // check if the pin state is LOW OR HIGH
 6ce:	20 b3       	in	r18, 0x10	; 16
 6d0:	41 e0       	ldi	r20, 0x01	; 1
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	08 2e       	mov	r0, r24
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_toggle+0x134>
 6d8:	44 0f       	add	r20, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	0a 94       	dec	r0
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_toggle+0x130>
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	24 23       	and	r18, r20
 6e4:	35 23       	and	r19, r21
 6e6:	08 2e       	mov	r0, r24
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_toggle+0x146>
 6ea:	35 95       	asr	r19
 6ec:	27 95       	ror	r18
 6ee:	0a 94       	dec	r0
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_toggle+0x142>
 6f2:	23 2b       	or	r18, r19
 6f4:	29 f4       	brne	.+10     	; 0x700 <DIO_toggle+0x158>
			PORTD |= (1<<pin_number);  // Set the pin State to be HIGH
 6f6:	82 b3       	in	r24, 0x12	; 18
 6f8:	48 2b       	or	r20, r24
 6fa:	42 bb       	out	0x12, r20	; 18
			return DIO_OK;
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	08 95       	ret
		}
		else if (((PIND&(1<<pin_number))>>pin_number) == HIGH){
 700:	20 b3       	in	r18, 0x10	; 16
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	24 23       	and	r18, r20
 706:	35 23       	and	r19, r21
 708:	b9 01       	movw	r22, r18
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_toggle+0x168>
 70c:	75 95       	asr	r23
 70e:	67 95       	ror	r22
 710:	8a 95       	dec	r24
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_toggle+0x164>
 714:	61 30       	cpi	r22, 0x01	; 1
 716:	71 05       	cpc	r23, r1
 718:	69 f4       	brne	.+26     	; 0x734 <DIO_toggle+0x18c>
			PORTD &= ~(1<<pin_number); // Set the pin State to be LOW
 71a:	82 b3       	in	r24, 0x12	; 18
 71c:	40 95       	com	r20
 71e:	48 23       	and	r20, r24
 720:	42 bb       	out	0x12, r20	; 18
			return DIO_OK;
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
		else {
			return DIO_cant_toggle;
		}
		break;
	}
}
 726:	08 95       	ret
		else if (((PINA&(1<<pin_number))>>pin_number) == HIGH){
			PORTA &= ~(1<<pin_number); // Set the pin State to be LOW
			return DIO_OK;
		}
		else {
			return DIO_cant_toggle;
 728:	84 e0       	ldi	r24, 0x04	; 4
 72a:	08 95       	ret
		else if (((PINB&(1<<pin_number))>>pin_number) == HIGH){
			PORTB &= ~(1<<pin_number); // Set the pin State to be LOW
			return DIO_OK;		
		}
		else {
			return DIO_cant_toggle;
 72c:	84 e0       	ldi	r24, 0x04	; 4
 72e:	08 95       	ret
		else if (((PINC&(1<<pin_number))>>pin_number) == HIGH){
			PORTC &= ~(1<<pin_number); // Set the pin State to be LOW
			return DIO_OK;
		}
		else {
			return DIO_cant_toggle;
 730:	84 e0       	ldi	r24, 0x04	; 4
 732:	08 95       	ret
		else if (((PIND&(1<<pin_number))>>pin_number) == HIGH){
			PORTD &= ~(1<<pin_number); // Set the pin State to be LOW
			return DIO_OK;
		}
		else {
			return DIO_cant_toggle;
 734:	84 e0       	ldi	r24, 0x04	; 4
		}
		break;
	}
}
 736:	08 95       	ret

00000738 <INT0_init>:
#include "interrupt.h"


Interrupt_status INT0_init(uint8_t Sense_Mode){
	// enable global interrupt
	Enable_Global_Interrupt();
 738:	78 94       	sei
	switch(Sense_Mode){     // selecting interrupt sense control
 73a:	81 30       	cpi	r24, 0x01	; 1
 73c:	69 f0       	breq	.+26     	; 0x758 <INT0_init+0x20>
 73e:	28 f0       	brcs	.+10     	; 0x74a <INT0_init+0x12>
 740:	82 30       	cpi	r24, 0x02	; 2
 742:	71 f0       	breq	.+28     	; 0x760 <INT0_init+0x28>
 744:	83 30       	cpi	r24, 0x03	; 3
 746:	81 f0       	breq	.+32     	; 0x768 <INT0_init+0x30>
 748:	1a c0       	rjmp	.+52     	; 0x77e <INT0_init+0x46>
		case LOW_LEVEL:
			MCUCR &= ~(1<<0); 
 74a:	85 b7       	in	r24, 0x35	; 53
 74c:	8e 7f       	andi	r24, 0xFE	; 254
 74e:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1<<1); 
 750:	85 b7       	in	r24, 0x35	; 53
 752:	8d 7f       	andi	r24, 0xFD	; 253
 754:	85 bf       	out	0x35, r24	; 53
			break;
 756:	0e c0       	rjmp	.+28     	; 0x774 <INT0_init+0x3c>
		case ANY_LOGICAL_CHANGE:
			MCUCR |= (1<<0); 
 758:	85 b7       	in	r24, 0x35	; 53
 75a:	81 60       	ori	r24, 0x01	; 1
 75c:	85 bf       	out	0x35, r24	; 53
			break;
 75e:	0a c0       	rjmp	.+20     	; 0x774 <INT0_init+0x3c>
		case FALLING_EDGE:
			MCUCR |= (1<<1);
 760:	85 b7       	in	r24, 0x35	; 53
 762:	82 60       	ori	r24, 0x02	; 2
 764:	85 bf       	out	0x35, r24	; 53
			break;
 766:	06 c0       	rjmp	.+12     	; 0x774 <INT0_init+0x3c>
		case RAISING_EDGE:
			MCUCR |= (1<<0);
 768:	85 b7       	in	r24, 0x35	; 53
 76a:	81 60       	ori	r24, 0x01	; 1
 76c:	85 bf       	out	0x35, r24	; 53
			MCUCR |= (1<<1);
 76e:	85 b7       	in	r24, 0x35	; 53
 770:	82 60       	ori	r24, 0x02	; 2
 772:	85 bf       	out	0x35, r24	; 53
			return Interrupt_Error;
			break;
		
	}
	
	GICR |= (1<<6);  // enable external interrupt 0
 774:	8b b7       	in	r24, 0x3b	; 59
 776:	80 64       	ori	r24, 0x40	; 64
 778:	8b bf       	out	0x3b, r24	; 59
	return Interrupt_OK;
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	08 95       	ret
		case RAISING_EDGE:
			MCUCR |= (1<<0);
			MCUCR |= (1<<1);
			break;
		default:
			return Interrupt_Error;
 77e:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	GICR |= (1<<6);  // enable external interrupt 0
	return Interrupt_OK;
}
 780:	08 95       	ret

00000782 <TimerNormal_init>:
#include "Timer.h"
#include "math.h"


void TimerNormal_init(){
	TCCR0 = 0x00; // normal mode
 782:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; // initial value 
 784:	12 be       	out	0x32, r1	; 50
 786:	08 95       	ret

00000788 <Timer_delay>:
}
void Timer_delay(float delay){
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	4b 01       	movw	r8, r22
 79e:	5c 01       	movw	r10, r24
	double Ttick,Tmaxdelay,Noverflows;
	uint8_t Tinit;
	uint16_t overflowcounter=0;
	Ttick = PRESCALER/1000000.0;
	Tmaxdelay = 256 * Ttick;
	Noverflows = ceil(delay/Tmaxdelay);
 7a0:	2d eb       	ldi	r18, 0xBD	; 189
 7a2:	37 e3       	ldi	r19, 0x37	; 55
 7a4:	46 e8       	ldi	r20, 0x86	; 134
 7a6:	5e e3       	ldi	r21, 0x3E	; 62
 7a8:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
 7ac:	0e 94 86 04 	call	0x90c	; 0x90c <ceil>
 7b0:	6b 01       	movw	r12, r22
 7b2:	7c 01       	movw	r14, r24
	Tinit = ceil(256 - ((delay/Ttick)/Noverflows));
 7b4:	2d eb       	ldi	r18, 0xBD	; 189
 7b6:	37 e3       	ldi	r19, 0x37	; 55
 7b8:	46 e8       	ldi	r20, 0x86	; 134
 7ba:	5a e3       	ldi	r21, 0x3A	; 58
 7bc:	c5 01       	movw	r24, r10
 7be:	b4 01       	movw	r22, r8
 7c0:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
 7c4:	a7 01       	movw	r20, r14
 7c6:	96 01       	movw	r18, r12
 7c8:	0e 94 9d 04 	call	0x93a	; 0x93a <__divsf3>
 7cc:	9b 01       	movw	r18, r22
 7ce:	ac 01       	movw	r20, r24
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	80 e8       	ldi	r24, 0x80	; 128
 7d6:	93 e4       	ldi	r25, 0x43	; 67
 7d8:	0e 94 19 04 	call	0x832	; 0x832 <__subsf3>
 7dc:	0e 94 86 04 	call	0x90c	; 0x90c <ceil>
 7e0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fixunssfsi>
	
	TCNT0 = Tinit;
 7e4:	62 bf       	out	0x32, r22	; 50
			break;	
		case 256:
			TCCR0 |= ((uint8_t)(0x04));
			break;
		case 1024:
			TCCR0 |= ((uint8_t)(0x05));
 7e6:	83 b7       	in	r24, 0x33	; 51
 7e8:	85 60       	ori	r24, 0x05	; 5
 7ea:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00; // initial value 
}
void Timer_delay(float delay){
	double Ttick,Tmaxdelay,Noverflows;
	uint8_t Tinit;
	uint16_t overflowcounter=0;
 7ec:	c0 e0       	ldi	r28, 0x00	; 0
 7ee:	d0 e0       	ldi	r29, 0x00	; 0
		case 256:
			TCCR0 |= ((uint8_t)(0x04));
			break;
		case 1024:
			TCCR0 |= ((uint8_t)(0x05));
			break;
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
	}
	while(overflowcounter < Noverflows){
		while ((TIFR &(1<<0)) == 0);
 7f2:	08 b6       	in	r0, 0x38	; 56
 7f4:	00 fe       	sbrs	r0, 0
 7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <Timer_delay+0x6a>
		TIFR |=1<<0;
 7f8:	88 b7       	in	r24, 0x38	; 56
 7fa:	81 60       	ori	r24, 0x01	; 1
 7fc:	88 bf       	out	0x38, r24	; 56
		overflowcounter++;
 7fe:	21 96       	adiw	r28, 0x01	; 1
			break;
		case 1024:
			TCCR0 |= ((uint8_t)(0x05));
			break;
	}
	while(overflowcounter < Noverflows){
 800:	be 01       	movw	r22, r28
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__floatunsisf>
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	c7 01       	movw	r24, r14
 810:	b6 01       	movw	r22, r12
 812:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__gesf2>
 816:	18 16       	cp	r1, r24
 818:	64 f3       	brlt	.-40     	; 0x7f2 <Timer_delay+0x6a>
		while ((TIFR &(1<<0)) == 0);
		TIFR |=1<<0;
		overflowcounter++;
	}
	TCNT0=0x00;
 81a:	12 be       	out	0x32, r1	; 50
}
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	ff 90       	pop	r15
 822:	ef 90       	pop	r14
 824:	df 90       	pop	r13
 826:	cf 90       	pop	r12
 828:	bf 90       	pop	r11
 82a:	af 90       	pop	r10
 82c:	9f 90       	pop	r9
 82e:	8f 90       	pop	r8
 830:	08 95       	ret

00000832 <__subsf3>:
 832:	50 58       	subi	r21, 0x80	; 128

00000834 <__addsf3>:
 834:	bb 27       	eor	r27, r27
 836:	aa 27       	eor	r26, r26
 838:	0e 94 31 04 	call	0x862	; 0x862 <__addsf3x>
 83c:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
 840:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
 844:	38 f0       	brcs	.+14     	; 0x854 <__addsf3+0x20>
 846:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
 84a:	20 f0       	brcs	.+8      	; 0x854 <__addsf3+0x20>
 84c:	39 f4       	brne	.+14     	; 0x85c <__addsf3+0x28>
 84e:	9f 3f       	cpi	r25, 0xFF	; 255
 850:	19 f4       	brne	.+6      	; 0x858 <__addsf3+0x24>
 852:	26 f4       	brtc	.+8      	; 0x85c <__addsf3+0x28>
 854:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>
 858:	0e f4       	brtc	.+2      	; 0x85c <__addsf3+0x28>
 85a:	e0 95       	com	r30
 85c:	e7 fb       	bst	r30, 7
 85e:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>

00000862 <__addsf3x>:
 862:	e9 2f       	mov	r30, r25
 864:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
 868:	58 f3       	brcs	.-42     	; 0x840 <__addsf3+0xc>
 86a:	ba 17       	cp	r27, r26
 86c:	62 07       	cpc	r22, r18
 86e:	73 07       	cpc	r23, r19
 870:	84 07       	cpc	r24, r20
 872:	95 07       	cpc	r25, r21
 874:	20 f0       	brcs	.+8      	; 0x87e <__addsf3x+0x1c>
 876:	79 f4       	brne	.+30     	; 0x896 <__addsf3x+0x34>
 878:	a6 f5       	brtc	.+104    	; 0x8e2 <__addsf3x+0x80>
 87a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_zero>
 87e:	0e f4       	brtc	.+2      	; 0x882 <__addsf3x+0x20>
 880:	e0 95       	com	r30
 882:	0b 2e       	mov	r0, r27
 884:	ba 2f       	mov	r27, r26
 886:	a0 2d       	mov	r26, r0
 888:	0b 01       	movw	r0, r22
 88a:	b9 01       	movw	r22, r18
 88c:	90 01       	movw	r18, r0
 88e:	0c 01       	movw	r0, r24
 890:	ca 01       	movw	r24, r20
 892:	a0 01       	movw	r20, r0
 894:	11 24       	eor	r1, r1
 896:	ff 27       	eor	r31, r31
 898:	59 1b       	sub	r21, r25
 89a:	99 f0       	breq	.+38     	; 0x8c2 <__addsf3x+0x60>
 89c:	59 3f       	cpi	r21, 0xF9	; 249
 89e:	50 f4       	brcc	.+20     	; 0x8b4 <__addsf3x+0x52>
 8a0:	50 3e       	cpi	r21, 0xE0	; 224
 8a2:	68 f1       	brcs	.+90     	; 0x8fe <__addsf3x+0x9c>
 8a4:	1a 16       	cp	r1, r26
 8a6:	f0 40       	sbci	r31, 0x00	; 0
 8a8:	a2 2f       	mov	r26, r18
 8aa:	23 2f       	mov	r18, r19
 8ac:	34 2f       	mov	r19, r20
 8ae:	44 27       	eor	r20, r20
 8b0:	58 5f       	subi	r21, 0xF8	; 248
 8b2:	f3 cf       	rjmp	.-26     	; 0x89a <__addsf3x+0x38>
 8b4:	46 95       	lsr	r20
 8b6:	37 95       	ror	r19
 8b8:	27 95       	ror	r18
 8ba:	a7 95       	ror	r26
 8bc:	f0 40       	sbci	r31, 0x00	; 0
 8be:	53 95       	inc	r21
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__addsf3x+0x52>
 8c2:	7e f4       	brtc	.+30     	; 0x8e2 <__addsf3x+0x80>
 8c4:	1f 16       	cp	r1, r31
 8c6:	ba 0b       	sbc	r27, r26
 8c8:	62 0b       	sbc	r22, r18
 8ca:	73 0b       	sbc	r23, r19
 8cc:	84 0b       	sbc	r24, r20
 8ce:	ba f0       	brmi	.+46     	; 0x8fe <__addsf3x+0x9c>
 8d0:	91 50       	subi	r25, 0x01	; 1
 8d2:	a1 f0       	breq	.+40     	; 0x8fc <__addsf3x+0x9a>
 8d4:	ff 0f       	add	r31, r31
 8d6:	bb 1f       	adc	r27, r27
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	c2 f7       	brpl	.-16     	; 0x8d0 <__addsf3x+0x6e>
 8e0:	0e c0       	rjmp	.+28     	; 0x8fe <__addsf3x+0x9c>
 8e2:	ba 0f       	add	r27, r26
 8e4:	62 1f       	adc	r22, r18
 8e6:	73 1f       	adc	r23, r19
 8e8:	84 1f       	adc	r24, r20
 8ea:	48 f4       	brcc	.+18     	; 0x8fe <__addsf3x+0x9c>
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f7 95       	ror	r31
 8f6:	9e 3f       	cpi	r25, 0xFE	; 254
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <__addsf3x+0x9a>
 8fa:	b0 cf       	rjmp	.-160    	; 0x85c <__addsf3+0x28>
 8fc:	93 95       	inc	r25
 8fe:	88 0f       	add	r24, r24
 900:	08 f0       	brcs	.+2      	; 0x904 <__addsf3x+0xa2>
 902:	99 27       	eor	r25, r25
 904:	ee 0f       	add	r30, r30
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	08 95       	ret

0000090c <ceil>:
 90c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_trunc>
 910:	90 f0       	brcs	.+36     	; 0x936 <ceil+0x2a>
 912:	9f 37       	cpi	r25, 0x7F	; 127
 914:	48 f4       	brcc	.+18     	; 0x928 <ceil+0x1c>
 916:	91 11       	cpse	r25, r1
 918:	16 f4       	brtc	.+4      	; 0x91e <ceil+0x12>
 91a:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_szero>
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	80 e8       	ldi	r24, 0x80	; 128
 924:	9f e3       	ldi	r25, 0x3F	; 63
 926:	08 95       	ret
 928:	26 f0       	brts	.+8      	; 0x932 <ceil+0x26>
 92a:	1b 16       	cp	r1, r27
 92c:	61 1d       	adc	r22, r1
 92e:	71 1d       	adc	r23, r1
 930:	81 1d       	adc	r24, r1
 932:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__fp_mintl>
 936:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_mpack>

0000093a <__divsf3>:
 93a:	0e 94 b1 04 	call	0x962	; 0x962 <__divsf3x>
 93e:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__fp_round>
 942:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscB>
 946:	58 f0       	brcs	.+22     	; 0x95e <__divsf3+0x24>
 948:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__fp_pscA>
 94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0x24>
 94e:	29 f4       	brne	.+10     	; 0x95a <__divsf3+0x20>
 950:	5f 3f       	cpi	r21, 0xFF	; 255
 952:	29 f0       	breq	.+10     	; 0x95e <__divsf3+0x24>
 954:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
 958:	51 11       	cpse	r21, r1
 95a:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_szero>
 95e:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_nan>

00000962 <__divsf3x>:
 962:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_split3>
 966:	68 f3       	brcs	.-38     	; 0x942 <__divsf3+0x8>

00000968 <__divsf3_pse>:
 968:	99 23       	and	r25, r25
 96a:	b1 f3       	breq	.-20     	; 0x958 <__divsf3+0x1e>
 96c:	55 23       	and	r21, r21
 96e:	91 f3       	breq	.-28     	; 0x954 <__divsf3+0x1a>
 970:	95 1b       	sub	r25, r21
 972:	55 0b       	sbc	r21, r21
 974:	bb 27       	eor	r27, r27
 976:	aa 27       	eor	r26, r26
 978:	62 17       	cp	r22, r18
 97a:	73 07       	cpc	r23, r19
 97c:	84 07       	cpc	r24, r20
 97e:	38 f0       	brcs	.+14     	; 0x98e <__divsf3_pse+0x26>
 980:	9f 5f       	subi	r25, 0xFF	; 255
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	22 0f       	add	r18, r18
 986:	33 1f       	adc	r19, r19
 988:	44 1f       	adc	r20, r20
 98a:	aa 1f       	adc	r26, r26
 98c:	a9 f3       	breq	.-22     	; 0x978 <__divsf3_pse+0x10>
 98e:	35 d0       	rcall	.+106    	; 0x9fa <__divsf3_pse+0x92>
 990:	0e 2e       	mov	r0, r30
 992:	3a f0       	brmi	.+14     	; 0x9a2 <__divsf3_pse+0x3a>
 994:	e0 e8       	ldi	r30, 0x80	; 128
 996:	32 d0       	rcall	.+100    	; 0x9fc <__divsf3_pse+0x94>
 998:	91 50       	subi	r25, 0x01	; 1
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	e6 95       	lsr	r30
 99e:	00 1c       	adc	r0, r0
 9a0:	ca f7       	brpl	.-14     	; 0x994 <__divsf3_pse+0x2c>
 9a2:	2b d0       	rcall	.+86     	; 0x9fa <__divsf3_pse+0x92>
 9a4:	fe 2f       	mov	r31, r30
 9a6:	29 d0       	rcall	.+82     	; 0x9fa <__divsf3_pse+0x92>
 9a8:	66 0f       	add	r22, r22
 9aa:	77 1f       	adc	r23, r23
 9ac:	88 1f       	adc	r24, r24
 9ae:	bb 1f       	adc	r27, r27
 9b0:	26 17       	cp	r18, r22
 9b2:	37 07       	cpc	r19, r23
 9b4:	48 07       	cpc	r20, r24
 9b6:	ab 07       	cpc	r26, r27
 9b8:	b0 e8       	ldi	r27, 0x80	; 128
 9ba:	09 f0       	breq	.+2      	; 0x9be <__divsf3_pse+0x56>
 9bc:	bb 0b       	sbc	r27, r27
 9be:	80 2d       	mov	r24, r0
 9c0:	bf 01       	movw	r22, r30
 9c2:	ff 27       	eor	r31, r31
 9c4:	93 58       	subi	r25, 0x83	; 131
 9c6:	5f 4f       	sbci	r21, 0xFF	; 255
 9c8:	3a f0       	brmi	.+14     	; 0x9d8 <__divsf3_pse+0x70>
 9ca:	9e 3f       	cpi	r25, 0xFE	; 254
 9cc:	51 05       	cpc	r21, r1
 9ce:	78 f0       	brcs	.+30     	; 0x9ee <__divsf3_pse+0x86>
 9d0:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_inf>
 9d4:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_szero>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	e4 f3       	brlt	.-8      	; 0x9d4 <__divsf3_pse+0x6c>
 9dc:	98 3e       	cpi	r25, 0xE8	; 232
 9de:	d4 f3       	brlt	.-12     	; 0x9d4 <__divsf3_pse+0x6c>
 9e0:	86 95       	lsr	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b7 95       	ror	r27
 9e8:	f7 95       	ror	r31
 9ea:	9f 5f       	subi	r25, 0xFF	; 255
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__divsf3_pse+0x78>
 9ee:	88 0f       	add	r24, r24
 9f0:	91 1d       	adc	r25, r1
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret
 9fa:	e1 e0       	ldi	r30, 0x01	; 1
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	bb 1f       	adc	r27, r27
 a04:	62 17       	cp	r22, r18
 a06:	73 07       	cpc	r23, r19
 a08:	84 07       	cpc	r24, r20
 a0a:	ba 07       	cpc	r27, r26
 a0c:	20 f0       	brcs	.+8      	; 0xa16 <__divsf3_pse+0xae>
 a0e:	62 1b       	sub	r22, r18
 a10:	73 0b       	sbc	r23, r19
 a12:	84 0b       	sbc	r24, r20
 a14:	ba 0b       	sbc	r27, r26
 a16:	ee 1f       	adc	r30, r30
 a18:	88 f7       	brcc	.-30     	; 0x9fc <__divsf3_pse+0x94>
 a1a:	e0 95       	com	r30
 a1c:	08 95       	ret

00000a1e <__fixunssfsi>:
 a1e:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_splitA>
 a22:	88 f0       	brcs	.+34     	; 0xa46 <__fixunssfsi+0x28>
 a24:	9f 57       	subi	r25, 0x7F	; 127
 a26:	98 f0       	brcs	.+38     	; 0xa4e <__fixunssfsi+0x30>
 a28:	b9 2f       	mov	r27, r25
 a2a:	99 27       	eor	r25, r25
 a2c:	b7 51       	subi	r27, 0x17	; 23
 a2e:	b0 f0       	brcs	.+44     	; 0xa5c <__fixunssfsi+0x3e>
 a30:	e1 f0       	breq	.+56     	; 0xa6a <__fixunssfsi+0x4c>
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	1a f0       	brmi	.+6      	; 0xa42 <__fixunssfsi+0x24>
 a3c:	ba 95       	dec	r27
 a3e:	c9 f7       	brne	.-14     	; 0xa32 <__fixunssfsi+0x14>
 a40:	14 c0       	rjmp	.+40     	; 0xa6a <__fixunssfsi+0x4c>
 a42:	b1 30       	cpi	r27, 0x01	; 1
 a44:	91 f0       	breq	.+36     	; 0xa6a <__fixunssfsi+0x4c>
 a46:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_zero>
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	08 95       	ret
 a4e:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_zero>
 a52:	67 2f       	mov	r22, r23
 a54:	78 2f       	mov	r23, r24
 a56:	88 27       	eor	r24, r24
 a58:	b8 5f       	subi	r27, 0xF8	; 248
 a5a:	39 f0       	breq	.+14     	; 0xa6a <__fixunssfsi+0x4c>
 a5c:	b9 3f       	cpi	r27, 0xF9	; 249
 a5e:	cc f3       	brlt	.-14     	; 0xa52 <__fixunssfsi+0x34>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b3 95       	inc	r27
 a68:	d9 f7       	brne	.-10     	; 0xa60 <__fixunssfsi+0x42>
 a6a:	3e f4       	brtc	.+14     	; 0xa7a <__fixunssfsi+0x5c>
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	08 95       	ret

00000a7c <__floatunsisf>:
 a7c:	e8 94       	clt
 a7e:	09 c0       	rjmp	.+18     	; 0xa92 <__floatsisf+0x12>

00000a80 <__floatsisf>:
 a80:	97 fb       	bst	r25, 7
 a82:	3e f4       	brtc	.+14     	; 0xa92 <__floatsisf+0x12>
 a84:	90 95       	com	r25
 a86:	80 95       	com	r24
 a88:	70 95       	com	r23
 a8a:	61 95       	neg	r22
 a8c:	7f 4f       	sbci	r23, 0xFF	; 255
 a8e:	8f 4f       	sbci	r24, 0xFF	; 255
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	99 23       	and	r25, r25
 a94:	a9 f0       	breq	.+42     	; 0xac0 <__floatsisf+0x40>
 a96:	f9 2f       	mov	r31, r25
 a98:	96 e9       	ldi	r25, 0x96	; 150
 a9a:	bb 27       	eor	r27, r27
 a9c:	93 95       	inc	r25
 a9e:	f6 95       	lsr	r31
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f1 11       	cpse	r31, r1
 aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <__floatsisf+0x1c>
 aac:	fa f4       	brpl	.+62     	; 0xaec <__floatsisf+0x6c>
 aae:	bb 0f       	add	r27, r27
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__floatsisf+0x36>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	1b c0       	rjmp	.+54     	; 0xaec <__floatsisf+0x6c>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	16 c0       	rjmp	.+44     	; 0xaec <__floatsisf+0x6c>
 ac0:	88 23       	and	r24, r24
 ac2:	11 f0       	breq	.+4      	; 0xac8 <__floatsisf+0x48>
 ac4:	96 e9       	ldi	r25, 0x96	; 150
 ac6:	11 c0       	rjmp	.+34     	; 0xaea <__floatsisf+0x6a>
 ac8:	77 23       	and	r23, r23
 aca:	21 f0       	breq	.+8      	; 0xad4 <__floatsisf+0x54>
 acc:	9e e8       	ldi	r25, 0x8E	; 142
 ace:	87 2f       	mov	r24, r23
 ad0:	76 2f       	mov	r23, r22
 ad2:	05 c0       	rjmp	.+10     	; 0xade <__floatsisf+0x5e>
 ad4:	66 23       	and	r22, r22
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__floatsisf+0x74>
 ad8:	96 e8       	ldi	r25, 0x86	; 134
 ada:	86 2f       	mov	r24, r22
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	2a f0       	brmi	.+10     	; 0xaec <__floatsisf+0x6c>
 ae2:	9a 95       	dec	r25
 ae4:	66 0f       	add	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	da f7       	brpl	.-10     	; 0xae2 <__floatsisf+0x62>
 aec:	88 0f       	add	r24, r24
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__fp_inf>:
 af6:	97 f9       	bld	r25, 7
 af8:	9f 67       	ori	r25, 0x7F	; 127
 afa:	80 e8       	ldi	r24, 0x80	; 128
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	60 e0       	ldi	r22, 0x00	; 0
 b00:	08 95       	ret

00000b02 <__fp_mintl>:
 b02:	88 23       	and	r24, r24
 b04:	71 f4       	brne	.+28     	; 0xb22 <__fp_mintl+0x20>
 b06:	77 23       	and	r23, r23
 b08:	21 f0       	breq	.+8      	; 0xb12 <__fp_mintl+0x10>
 b0a:	98 50       	subi	r25, 0x08	; 8
 b0c:	87 2b       	or	r24, r23
 b0e:	76 2f       	mov	r23, r22
 b10:	07 c0       	rjmp	.+14     	; 0xb20 <__fp_mintl+0x1e>
 b12:	66 23       	and	r22, r22
 b14:	11 f4       	brne	.+4      	; 0xb1a <__fp_mintl+0x18>
 b16:	99 27       	eor	r25, r25
 b18:	0d c0       	rjmp	.+26     	; 0xb34 <__fp_mintl+0x32>
 b1a:	90 51       	subi	r25, 0x10	; 16
 b1c:	86 2b       	or	r24, r22
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	60 e0       	ldi	r22, 0x00	; 0
 b22:	2a f0       	brmi	.+10     	; 0xb2e <__fp_mintl+0x2c>
 b24:	9a 95       	dec	r25
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	da f7       	brpl	.-10     	; 0xb24 <__fp_mintl+0x22>
 b2e:	88 0f       	add	r24, r24
 b30:	96 95       	lsr	r25
 b32:	87 95       	ror	r24
 b34:	97 f9       	bld	r25, 7
 b36:	08 95       	ret

00000b38 <__fp_mpack>:
 b38:	9f 3f       	cpi	r25, 0xFF	; 255
 b3a:	31 f0       	breq	.+12     	; 0xb48 <__fp_mpack_finite+0xc>

00000b3c <__fp_mpack_finite>:
 b3c:	91 50       	subi	r25, 0x01	; 1
 b3e:	20 f4       	brcc	.+8      	; 0xb48 <__fp_mpack_finite+0xc>
 b40:	87 95       	ror	r24
 b42:	77 95       	ror	r23
 b44:	67 95       	ror	r22
 b46:	b7 95       	ror	r27
 b48:	88 0f       	add	r24, r24
 b4a:	91 1d       	adc	r25, r1
 b4c:	96 95       	lsr	r25
 b4e:	87 95       	ror	r24
 b50:	97 f9       	bld	r25, 7
 b52:	08 95       	ret

00000b54 <__fp_nan>:
 b54:	9f ef       	ldi	r25, 0xFF	; 255
 b56:	80 ec       	ldi	r24, 0xC0	; 192
 b58:	08 95       	ret

00000b5a <__fp_pscA>:
 b5a:	00 24       	eor	r0, r0
 b5c:	0a 94       	dec	r0
 b5e:	16 16       	cp	r1, r22
 b60:	17 06       	cpc	r1, r23
 b62:	18 06       	cpc	r1, r24
 b64:	09 06       	cpc	r0, r25
 b66:	08 95       	ret

00000b68 <__fp_pscB>:
 b68:	00 24       	eor	r0, r0
 b6a:	0a 94       	dec	r0
 b6c:	12 16       	cp	r1, r18
 b6e:	13 06       	cpc	r1, r19
 b70:	14 06       	cpc	r1, r20
 b72:	05 06       	cpc	r0, r21
 b74:	08 95       	ret

00000b76 <__fp_round>:
 b76:	09 2e       	mov	r0, r25
 b78:	03 94       	inc	r0
 b7a:	00 0c       	add	r0, r0
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__fp_round+0xc>
 b7e:	88 23       	and	r24, r24
 b80:	52 f0       	brmi	.+20     	; 0xb96 <__fp_round+0x20>
 b82:	bb 0f       	add	r27, r27
 b84:	40 f4       	brcc	.+16     	; 0xb96 <__fp_round+0x20>
 b86:	bf 2b       	or	r27, r31
 b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0x18>
 b8a:	60 ff       	sbrs	r22, 0
 b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__fp_round+0x20>
 b8e:	6f 5f       	subi	r22, 0xFF	; 255
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	08 95       	ret

00000b98 <__fp_split3>:
 b98:	57 fd       	sbrc	r21, 7
 b9a:	90 58       	subi	r25, 0x80	; 128
 b9c:	44 0f       	add	r20, r20
 b9e:	55 1f       	adc	r21, r21
 ba0:	59 f0       	breq	.+22     	; 0xbb8 <__fp_splitA+0x10>
 ba2:	5f 3f       	cpi	r21, 0xFF	; 255
 ba4:	71 f0       	breq	.+28     	; 0xbc2 <__fp_splitA+0x1a>
 ba6:	47 95       	ror	r20

00000ba8 <__fp_splitA>:
 ba8:	88 0f       	add	r24, r24
 baa:	97 fb       	bst	r25, 7
 bac:	99 1f       	adc	r25, r25
 bae:	61 f0       	breq	.+24     	; 0xbc8 <__fp_splitA+0x20>
 bb0:	9f 3f       	cpi	r25, 0xFF	; 255
 bb2:	79 f0       	breq	.+30     	; 0xbd2 <__fp_splitA+0x2a>
 bb4:	87 95       	ror	r24
 bb6:	08 95       	ret
 bb8:	12 16       	cp	r1, r18
 bba:	13 06       	cpc	r1, r19
 bbc:	14 06       	cpc	r1, r20
 bbe:	55 1f       	adc	r21, r21
 bc0:	f2 cf       	rjmp	.-28     	; 0xba6 <__fp_split3+0xe>
 bc2:	46 95       	lsr	r20
 bc4:	f1 df       	rcall	.-30     	; 0xba8 <__fp_splitA>
 bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <__fp_splitA+0x30>
 bc8:	16 16       	cp	r1, r22
 bca:	17 06       	cpc	r1, r23
 bcc:	18 06       	cpc	r1, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	f1 cf       	rjmp	.-30     	; 0xbb4 <__fp_splitA+0xc>
 bd2:	86 95       	lsr	r24
 bd4:	71 05       	cpc	r23, r1
 bd6:	61 05       	cpc	r22, r1
 bd8:	08 94       	sec
 bda:	08 95       	ret

00000bdc <__fp_trunc>:
 bdc:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fp_splitA>
 be0:	a0 f0       	brcs	.+40     	; 0xc0a <__fp_trunc+0x2e>
 be2:	be e7       	ldi	r27, 0x7E	; 126
 be4:	b9 17       	cp	r27, r25
 be6:	88 f4       	brcc	.+34     	; 0xc0a <__fp_trunc+0x2e>
 be8:	bb 27       	eor	r27, r27
 bea:	9f 38       	cpi	r25, 0x8F	; 143
 bec:	60 f4       	brcc	.+24     	; 0xc06 <__fp_trunc+0x2a>
 bee:	16 16       	cp	r1, r22
 bf0:	b1 1d       	adc	r27, r1
 bf2:	67 2f       	mov	r22, r23
 bf4:	78 2f       	mov	r23, r24
 bf6:	88 27       	eor	r24, r24
 bf8:	98 5f       	subi	r25, 0xF8	; 248
 bfa:	f7 cf       	rjmp	.-18     	; 0xbea <__fp_trunc+0xe>
 bfc:	86 95       	lsr	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	b1 1d       	adc	r27, r1
 c04:	93 95       	inc	r25
 c06:	96 39       	cpi	r25, 0x96	; 150
 c08:	c8 f3       	brcs	.-14     	; 0xbfc <__fp_trunc+0x20>
 c0a:	08 95       	ret

00000c0c <__fp_zero>:
 c0c:	e8 94       	clt

00000c0e <__fp_szero>:
 c0e:	bb 27       	eor	r27, r27
 c10:	66 27       	eor	r22, r22
 c12:	77 27       	eor	r23, r23
 c14:	cb 01       	movw	r24, r22
 c16:	97 f9       	bld	r25, 7
 c18:	08 95       	ret

00000c1a <__gesf2>:
 c1a:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_cmp>
 c1e:	08 f4       	brcc	.+2      	; 0xc22 <__gesf2+0x8>
 c20:	8f ef       	ldi	r24, 0xFF	; 255
 c22:	08 95       	ret

00000c24 <__fp_cmp>:
 c24:	99 0f       	add	r25, r25
 c26:	00 08       	sbc	r0, r0
 c28:	55 0f       	add	r21, r21
 c2a:	aa 0b       	sbc	r26, r26
 c2c:	e0 e8       	ldi	r30, 0x80	; 128
 c2e:	fe ef       	ldi	r31, 0xFE	; 254
 c30:	16 16       	cp	r1, r22
 c32:	17 06       	cpc	r1, r23
 c34:	e8 07       	cpc	r30, r24
 c36:	f9 07       	cpc	r31, r25
 c38:	c0 f0       	brcs	.+48     	; 0xc6a <__fp_cmp+0x46>
 c3a:	12 16       	cp	r1, r18
 c3c:	13 06       	cpc	r1, r19
 c3e:	e4 07       	cpc	r30, r20
 c40:	f5 07       	cpc	r31, r21
 c42:	98 f0       	brcs	.+38     	; 0xc6a <__fp_cmp+0x46>
 c44:	62 1b       	sub	r22, r18
 c46:	73 0b       	sbc	r23, r19
 c48:	84 0b       	sbc	r24, r20
 c4a:	95 0b       	sbc	r25, r21
 c4c:	39 f4       	brne	.+14     	; 0xc5c <__fp_cmp+0x38>
 c4e:	0a 26       	eor	r0, r26
 c50:	61 f0       	breq	.+24     	; 0xc6a <__fp_cmp+0x46>
 c52:	23 2b       	or	r18, r19
 c54:	24 2b       	or	r18, r20
 c56:	25 2b       	or	r18, r21
 c58:	21 f4       	brne	.+8      	; 0xc62 <__fp_cmp+0x3e>
 c5a:	08 95       	ret
 c5c:	0a 26       	eor	r0, r26
 c5e:	09 f4       	brne	.+2      	; 0xc62 <__fp_cmp+0x3e>
 c60:	a1 40       	sbci	r26, 0x01	; 1
 c62:	a6 95       	lsr	r26
 c64:	8f ef       	ldi	r24, 0xFF	; 255
 c66:	81 1d       	adc	r24, r1
 c68:	81 1d       	adc	r24, r1
 c6a:	08 95       	ret

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
